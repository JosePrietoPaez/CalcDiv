<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorNumerico" xml:space="preserve">
    <value>The divisor, the base and coefficient amount must be positive integers.</value>
  </data>
  <data name="ErrorPrimo" xml:space="preserve">
    <value>The divisor and the base are not coprime.
Calculating a coefficient in this case will not be implemented.
Run this program with the option-x to obtain a different type of rule, or activate it in dialog mode.</value>
    <comment>1 is the divisior divided by the gcd of itself and the base.
0 is the gcd.</comment>
  </data>
  <data name="HelpAyuda" xml:space="preserve">
    <value>Outputs a longer help document explaining this application more in-depth.</value>
  </data>
  <data name="HelpAyudaCorta" xml:space="preserve">
    <value>Outputs short document with information on how to run this program.</value>
  </data>
  <data name="HelpDirecto" xml:space="preserve">
    <value>Reads the divisor, base, and optionally the number of coefficients as arguments, not as dialog input. Must be two or three valid 64-bit integers.</value>
  </data>
  <data name="HelpExtendido" xml:space="preserve">
    <value>May return other types of rules, also outputs explanations on how to apply them, ignores all other flags, except -d.</value>
  </data>
  <data name="HelpJson" xml:space="preserve">
    <value>Outputs coefficient rule as a JSON object, changes made by other flags are not ignored.</value>
  </data>
  <data name="HelpNombre" xml:space="preserve">
    <value>Gives the coefficient rule a name, which is included in its output.</value>
  </data>
  <data name="HelpSaltar" xml:space="preserve">
    <value>Without any other options, skips dialogue related to other options, does not affect output.</value>
  </data>
  <data name="HelpTodos" xml:space="preserve">
    <value>Outputs all coefficient rules with elements whose absolute value is less than the divisor.</value>
  </data>
  <data name="MensajeSalidaVoluntaria" xml:space="preserve">
    <value>Exit message has been detected, execution was interrupted.</value>
    <comment>Shown when the user sends the exit sequence in dialog mode</comment>
  </data>
  <data name="MensajeParametrosDirecto" xml:space="preserve">
    <value>Divisor: {0}, Base: {1}, Coefficients: {2}.</value>
    <comment>The parameters are the arguments passed to the -d flag</comment>
  </data>
  <data name="MensajeFinDirecto" xml:space="preserve">
    <value>The rule was calculated.</value>
    <comment>Shown at the end of a direct call</comment>
  </data>
  <data name="MensajeDialogoExtendido" xml:space="preserve">
    <value>Type "s" to obtain coefficient rules, type a different letter to obtain rules: </value>
  </data>
  <data name="MensajeDialogoJson" xml:space="preserve">
    <value>Type "s" to output the rule as a JSON, if the rule is not going to be parsed type another letter: </value>
  </data>
  <data name="MensajeDialogoTodas" xml:space="preserve">
    <value>Type "s" to output all the rules derived from the original, type a different letter to obtain the minimum rule: </value>
  </data>
  <data name="MensajeDialogoBase" xml:space="preserve">
    <value>Base of the rule: </value>
  </data>
  <data name="ErrorBase" xml:space="preserve">
    <value>The base must be an integer greater than one.</value>
  </data>
  <data name="ErrorDivisor" xml:space="preserve">
    <value>The divisor must be a non-negative integer.
Keep in mind that numbers divisible by a negative number are divisible by its absolute value.</value>
  </data>
  <data name="ErrorDivisorCoprimo" xml:space="preserve">
    <value>The divisor must be a positive integer greater than one and coprime with the base.
Two numbers are coprime if their greatest common divisor is greater than one.</value>
  </data>
  <data name="MensajeDialogoDivisor" xml:space="preserve">
    <value>Divisor of the rule: </value>
  </data>
  <data name="MensajeDialogoCoeficientes" xml:space="preserve">
    <value>Number of coefficients in the rule: </value>
  </data>
  <data name="ErrorCoeficientes" xml:space="preserve">
    <value>The number of coefficients must be a positive integer.</value>
  </data>
  <data name="MensajeInicioDialogo" xml:space="preserve">
    <value>You will be asked to input data throught the console, write {0} to interrupt the program.</value>
    <comment>Shown at the beginning of dialog mode</comment>
  </data>
  <data name="MensajeDialogoRegla" xml:space="preserve">
    <value>Name of the rule, can be left empty: </value>
  </data>
  <data name="MensajeDialogoResultado" xml:space="preserve">
    <value>Obtained the following rule: </value>
  </data>
  <data name="MensajeDialogoRepetir" xml:space="preserve">
    <value>Type "s" to calculate another rule: </value>
  </data>
  <data name="MensajeDialogoInterrumpido" xml:space="preserve">
    <value>The program was interrupted.</value>
  </data>
  <data name="SentenceBadFormatConversionErrorOption" xml:space="preserve">
    <value>Option '{0}' is defined in the wrong format.</value>
  </data>
  <data name="SentenceBadFormatConversionErrorValue" xml:space="preserve">
    <value>A value not bound to option name is defined with a bad format.</value>
  </data>
  <data name="SentenceBadFormatTokenError" xml:space="preserve">
    <value>Token '{0}' is not recognized.</value>
  </data>
  <data name="SentenceBadVerbSelectedError" xml:space="preserve">
    <value>Verb '{0}' is not recognized.</value>
  </data>
  <data name="SentenceErrorsHeadingText" xml:space="preserve">
    <value>ERROR(S):</value>
  </data>
  <data name="SentenceHelpCommandTextOption" xml:space="preserve">
    <value>Display this help screen.</value>
  </data>
  <data name="SentenceHelpCommandTextVerb" xml:space="preserve">
    <value>Display more information on a specific command.</value>
  </data>
  <data name="SentenceMissingRequiredOptionError" xml:space="preserve">
    <value>Required option '{0}' is missing.</value>
  </data>
  <data name="SentenceMissingRequiredValueError" xml:space="preserve">
    <value>A required value not bound to option name is missing.</value>
  </data>
  <data name="SentenceMissingValueOptionError" xml:space="preserve">
    <value>Option '{0}' has no value.</value>
  </data>
  <data name="SentenceMutuallyExclusiveSetErrors" xml:space="preserve">
    <value>Options: {0} are not compatible with {1}.</value>
  </data>
  <data name="SentenceNoVerbSelectedError" xml:space="preserve">
    <value>No verb selected.</value>
  </data>
  <data name="SentenceRepeatedOptionError" xml:space="preserve">
    <value>Option '{0}' is defined multiple times.</value>
  </data>
  <data name="SentenceRequiredWord" xml:space="preserve">
    <value>Required.</value>
  </data>
  <data name="SentenceSequenceOutOfRangeErrorOption" xml:space="preserve">
    <value>A sequence option '{0}' is defined with fewer or more items than required.</value>
  </data>
  <data name="SentenceSequenceOutOfRangeErrorValue" xml:space="preserve">
    <value>A sequence value not bound to option name is defined with fewer items than required.</value>
  </data>
  <data name="SentenceSetValueExceptionError" xml:space="preserve">
    <value>Error setting value to option '{0}': {1}</value>
  </data>
  <data name="SentenceUnknownOptionError" xml:space="preserve">
    <value>Option '{0}' is unknown.</value>
  </data>
  <data name="SentenceUsageHeadingText" xml:space="preserve">
    <value>USAGE:</value>
  </data>
  <data name="SentenceVersionCommandText" xml:space="preserve">
    <value>Display version information.</value>
  </data>
  <data name="OptionGroupWord" xml:space="preserve">
    <value>option</value>
  </data>
  <data name="Ayuda" xml:space="preserve">
    <value>CalcDivCLI Help:

- Usage: CalcDivCLI.exe [-&lt;short option name&gt;|--&lt;long option name&gt; [&lt;mandatory arguments ...&gt; [&lt;optional arguments&gt;...]]

Example: *CalcDiv.exe --json --direct-output 7 10 --named-rule Nombre*
Equivalent to: *CalcDiv.exe -jd 7 10 -n Nombre*
Calculates the divisibility rule of 7 in base 10, gives it the name Nombre and outputs it in JSON.

- Program options, can be concatenated after a dash: *CalcDiv.exe -ajd 3 4 1* o *CalcDiv.exe -H*, use --help for further info.

-H: shows this message, ignores other options.
-h: shows a summary of this message, ignores other options.
-d: allows for the arguments to be passed in the command line instead of keyboard input. 2 or 3 arguments are passed: the divisor, base and optionally the rule length.
-a: writes all possible rules using the given rule length, the coefficients' absolute value will be lower than the divisor.
-n: writes the given name before every element or is included in the JSON output.
-j: outputs the rule in JSON, unless -x is used.
-x: outputs a different rule, also explains how to apply said rule. Possible cases are similar to the rules of 0, 1, 2, 3 and 11.
-m: receives divisors and bases separated by commas and returns all the rules of every divisor,base pair. May also receive the length of the rules.

All arguments and options must be valid.
Options with arguments must not be followed by another option in the same combination, for example *CalcDivCLI.exe -na Nombre* is invalid, but the combination -an Nombre is valid.

This program calculates divisibility rules of the given integers for any integer base larger than one.
Rules are usually expressed as a list of coefficients, these are multiplied to the digits in the same position of a number, these products are added together and this sum is added to the rest of the digits.
This rule is applied to the resulting number until we can see that it is a multiple of the divisor.
The length of a rule can be given as an argument if -d is used without -x.

To better understand we will apply the rule [-2, -3], obtained from the divisor 7 and base 10 on the number 1234.

-First, we multiply 3 by -3 and 4 by -2, we get -6 and -12.
-After that, we add these products to the rest of the number, in this case 12. The result is -6.

Trivially, -6 is not a multiple of 7, therefore 1234 cannot be a multiple of 7.
If we cannot determine whether the number is a multiple of the divisor, we apply the rule to the number we obtain until we can.

- Output values

0: successful execution.
1: there were invalid arguments.
2: there was an error parsing the options or arguments.
3: the user quit during dialog.
4: could not find an alternative rule with -x.
5: multiple rules were requested, some weren't calculated.
6: multiple rules were requested, none were calculated.
</value>
  </data>
  <data name="AyudaCorta" xml:space="preserve">
    <value>- Usage: CalcDivCLI.exe [-&amp;lt;short option name&amp;gt;|--&amp;lt;long option name&amp;gt; [&amp;lt;mandatory arguments ...&amp;gt; [&amp;lt;optional arguments&amp;gt;...]]

Example: *CalcDiv.exe --json --direct-output 7 10 --named-rule Nombre*
Equivalent to: *CalcDiv.exe -jd 7 10 -n Nombre*
Calculates the divisibility rule of 7 in base 10, gives it the name Nombre and outputs it in JSON.

Use --help for more information about options and arguments or -H for more information about this application.</value>
  </data>
  <data name="DirectoReferirExtendidoPotencias" xml:space="preserve">
    <value>Cannot calculate coefficient rule, the divisor is composed of the prime factors of the base, a rule can be calculated running with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoErrorInesperado" xml:space="preserve">
    <value>Cannot calculate this rule due to an unexpected error, try running with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoUsable" xml:space="preserve">
    <value>Coefficient rule can be calculated, however, in this case it is recommended to run with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoValido" xml:space="preserve">
    <value>Coefficient rule can be calculated, in this case it is not recommended to use the -x option.</value>
  </data>
  <data name="DialogoExcepcionInesperada" xml:space="preserve">
    <value>An unexpected error ocurred, consider creating a new Issue on GitHub if it isn't present, include the trace above and the arguments provided:
https://github.com/JosePrietoPaez/CalcDiv/issues</value>
  </data>
  <data name="HelpVarias" xml:space="preserve">
    <value>Recieves multiple bases, divisors and coefficients as arguments and outputs the rule formed by every (divisor,base,coefficient) tuple.
All bases, divisors and coefficients must be valid.
Activates direct output mode.</value>
  </data>
  <data name="ErrorPrimoExtra" xml:space="preserve">
    <value>The divisor and the base are not coprime.
Calculating a coefficient in this case will not be implemented.</value>
  </data>
  <data name="VariasMensajeError" xml:space="preserve">
    <value>Some rules couldn't be calculated.
Probably caused by a divisor, base pair not being coprime.
Check the error stream for more information.</value>
  </data>
  <data name="VariasMensajeErrorTotal" xml:space="preserve">
    <value>No rules were calculated.
Might be caused by none of the divisors being coprime with the bases.
Check the error stream for more information.</value>
  </data>
  <data name="ObjetoNuloMensaje" xml:space="preserve">
    <value>Object is null.</value>
  </data>
  <data name="VariasMensajeVacio" xml:space="preserve">
    <value>The rule wasn't calculated, should be caused bv the divisor and base not being coprime.
This rule can be ignored.</value>
  </data>
  <data name="ErrorDivisorExtra" xml:space="preserve">
    <value>The divisor must be a non-negative integer.</value>
  </data>
</root>
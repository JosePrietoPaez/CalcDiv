<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CalculosCrearMensaje" xml:space="preserve">
    <value>Un entero en base {0} será divisible entre {1} si </value>
  </data>
  <data name="CalculosExtendidaMensajeExceso" xml:space="preserve">
    <value>Resultado demasiado grande</value>
  </data>
  <data name="CalculosExtendidaMensajeFracaso" xml:space="preserve">
    <value>No se ha encontrado ninguna regla alternativa, aplique la regla de coeficientes si se puede calcular.</value>
  </data>
  <data name="CalculosExtendidaMensajeCero" xml:space="preserve">
    <value>No se le puede aplicar la relación de divisibilidad a cero.</value>
  </data>
  <data name="CalculosExtendidaMensajeCifrasPrincipio" xml:space="preserve">
    <value>{0} está compuesto de potencias de los factores primos de {1}.</value>
  </data>
  <data name="CalculosExtendidaMensajeCifrasFinal" xml:space="preserve">
    <value>sus primeras {0} cifras son múltiplo de </value>
  </data>
  <data name="CalculosExtendidaMensajeUno" xml:space="preserve">
    <value>Todos los enteros son divisibles entre uno.</value>
  </data>
  <data name="CalculosExtendidaRestarPrincipio" xml:space="preserve">
    <value>{0} es divisor de {1} elevado a {2} más uno ({3}).</value>
  </data>
  <data name="CalculosExtendidaRestarFinal" xml:space="preserve">
    <value>al separar sus cifras en grupos de {0} desde las unidades, la diferencia de la suma de los grupos pares y la de los grupos impares es múltiplo de </value>
  </data>
  <data name="CalculosExtendidaSumarPrincipio" xml:space="preserve">
    <value>{0} es divisor de {1} elevado a {2} menos uno ({3}).</value>
  </data>
  <data name="CalculosExtendidaSumarFinal" xml:space="preserve">
    <value>al separar sus cifras en grupos de {0} desde las unidades, la suma de los grupos es múltiplo de </value>
  </data>
  <data name="CalculosValorUnoRestarPrincipio" xml:space="preserve">
    <value> es divisor de {0} más uno</value>
  </data>
  <data name="CalculosValorUnoRestarFinal" xml:space="preserve">
    <value>la diferencia de la suma de las cifras en posiciones pares con la de las posiciones impares es múltiplo de </value>
  </data>
  <data name="CalculosValorUnoSumarPrincipio" xml:space="preserve">
    <value> es divisor de {0} menos uno</value>
  </data>
  <data name="CalculosValorUnoSumarFinal" xml:space="preserve">
    <value>la suma de sus cifras es múltiplo de </value>
  </data>
  <data name="ReglaDivisorNegativoError" xml:space="preserve">
    <value>El divisor no puede ser negativo</value>
  </data>
  <data name="ReglaBaseMenorError" xml:space="preserve">
    <value>La base debe ser mayor que uno</value>
  </data>
  <data name="ReglaVaciaError" xml:space="preserve">
    <value>La regla recibida está vacía</value>
  </data>
  <data name="MensajeAplicarInicio" xml:space="preserve">
    <value>Aplicando la regla de divisibilidad de {0}, en base {1} a {2} con {3} coeficientes:</value>
  </data>
  <data name="MensajeAplicarSeparar" xml:space="preserve">
    <value>Separamos el número en dos partes, la derecha tendrá longitud {0}:
Izquierda: {1}
Derecha: {2}</value>
  </data>
  <data name="MensajeAplicarMultiplicarCoeficientes" xml:space="preserve">
    <value>Paso dos: multiplicar cada cifra de la parte derecha por el coeficiente en la misma posición:</value>
  </data>
  <data name="MensajeAplicarProductoCoeficiente" xml:space="preserve">
    <value>Resultados:</value>
  </data>
  <data name="MensajeAplicarSuma" xml:space="preserve">
    <value>Paso tres: Sumar las suma de los productos con la parte izquierda del dividendo:</value>
  </data>
  <data name="MensajeAplicarFin" xml:space="preserve">
    <value>{0} es divisible entre {1}, por lo tanto, el dividendo original, {2}, también lo es.</value>
  </data>
  <data name="MensajeAplicarFinNoDivisible" xml:space="preserve">
    <value>{0} no es divisible entre {1}, por lo tanto, el dividendo original, {2}, tampoco lo es.</value>
  </data>
  <data name="MensajeAplicarFinPorTamaño" xml:space="preserve">
    <value>Se estima que la divisibilidad de {0} es fácil de calcular.</value>
  </data>
  <data name="MensajeAplicarMinimoEncontrado" xml:space="preserve">
    <value>El último dividendo, {0}, no ha sido menor que el anterior, {1}.
Se harán dos iteraciones más antes de parar.</value>
  </data>
  <data name="MensajeAlfabetoNumericoExito" xml:space="preserve">
    <value>Los números relacionados con el dividendo se representarán en base {0} de forma natural para facilitar la lectura usando las siguientes cifras:</value>
  </data>
  <data name="MensajeAlfabetoNumericoExceso" xml:space="preserve">
    <value>La base es demasiado grande para representar los números de forma natural, se mostrarán con el valor de sus cifras en base diez.</value>
  </data>
  <data name="MensajeAplicarParteDerechaPequeña" xml:space="preserve">
    <value>El dividendo, {0}, es demasiado pequeño, use los primeros coeficientes desde la izquierda.</value>
  </data>
  <data name="ReglaExpliacadaCoeficientes" xml:space="preserve">
    <value>Aplique la regla como se especifica en el README con los coeficientes obtenidos</value>
  </data>
  <data name="ReglaExplicadaCero" xml:space="preserve">
    <value>No se puede crear ninguna regla, la divisibilidad no es aplicable con divisor cero.</value>
  </data>
  <data name="ReglaConstructorRestriccionCero" xml:space="preserve">
    <value>Para este tipo, el divisor debe ser cero.</value>
  </data>
  <data name="ReglaConstructorRestriccionUno" xml:space="preserve">
    <value>Para este tipo, el divisor debe ser uno.</value>
  </data>
  <data name="ReglaExplicadaUno" xml:space="preserve">
    <value>No es necesaria ninguna regla, todos los enteros son divisibles entre uno.</value>
  </data>
  <data name="ReglaExplicadaCifras" xml:space="preserve">
    <value>El dividendo será divisible entre {0} si, y solo si, las últimas {1} cifras en base {2} son divisibles entre {0}.</value>
  </data>
  <data name="ReglaExplicadaSumar" xml:space="preserve">
    <value>El dividendo será divisible entre {0} si, y solo si, la suma de las cifras en base {1} agrupadas en bloques de {2}, desde la de las unidades es divisible entre {0}.</value>
  </data>
  <data name="ReglaExplicadaRestar" xml:space="preserve">
    <value>El dividendo será divisible entre {0} si, y solo si, la resta de la suma de los grupos pares e impares de las cifras en base {1} de {2} cifras, desde la de las unidades, es divisible entre {0}.</value>
  </data>
</root>
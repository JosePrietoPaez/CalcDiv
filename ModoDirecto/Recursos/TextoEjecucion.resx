<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>1.3</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EjemploReglaVarias" xml:space="preserve">
	<value>Find non-coefficient rules for 7, 100 and 41 in bases 10 and 8 and apply the rules using 6342 and 289</value>
  </data>
  <data name="EjemploReglaDialogo" xml:space="preserve">
	<value>Start dialog with application to find rules</value>
  </data>
  <data name="EjemploReglaJsonExtendido" xml:space="preserve">
	<value>Find non-coefficient rule for thirteen in base sixteen and output as JSON</value>
  </data>
  <data name="EjemploReglaUno" xml:space="preserve">
	<value>Find rule for seven in base twelve, using two coefficients</value>
  </data>
  <data name="ErrorBase" xml:space="preserve">
	<value>The base must be an integer greater than one.</value>
  </data>
  <data name="DirectoReferirExtendidoErrorInesperado" xml:space="preserve">
	<value>Cannot calculate this rule due to an unexpected error, try running with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoPotencias" xml:space="preserve">
	<value>Cannot calculate coefficient rule, the divisor is composed of the prime factors of the base, a rule can be calculated running with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoUsable" xml:space="preserve">
	<value>Coefficient rule can be calculated, however, in this case it is recommended to run with -x option, like: </value>
  </data>
  <data name="DirectoReferirExtendidoValido" xml:space="preserve">
	<value>Coefficient rule can be calculated, in this case it is not recommended to use the -x option.</value>
  </data>
  <data name="VariasMensajeVacio" xml:space="preserve">
	<value>The rule wasn't calculated, should be caused bv the divisor and base not being coprime.
This rule can be ignored.</value>
  </data>
  <data name="VariasMensajeError" xml:space="preserve">
	<value>Some rules couldn't be calculated.
Probably caused by a divisor, base pair not being coprime.
Check the error stream for more information.</value>
  </data>
  <data name="VariasMensajeErrorTotal" xml:space="preserve">
	<value>No rules were calculated.
Might be caused by none of the divisors being coprime with the bases.
Check the error stream for more information.</value>
  </data>
  <data name="Ayuda" xml:space="preserve">
	<value>CalcDivCLI Help:

- Program options per verb: use --help for information on the available verbs.
	* General options, except for manual:
		* -j, --json: Outputs the rule as JSON.
		* -d, --dividend: Applies and explains all rules obtained using the integers passed to it, separated by commas.
		* -c, --coefficient-rules: Will attempt to find a coefficient rule if possible. Bases and divisors will now have to be coprime.
		* --length: Sets the amount of coefficients in coefficient rules. Must be a positive integer.
	* single (default):
		* Arguments: This verbs uses two positional arguments.
			* Divisor: Mandatory. Rules will test divisibility by this number.
			* Base: Optional, defaults to ten. Rules will be applied in this base.
	* multiple:
		* Arguments: This verbs uses two positional arguments.
			* Divisors: Mandatory. Rules will test divisibility by these numbers. The different divisors must be separated by commas.
			* Base: Optional, defaults to a single ten. Rules will be applied in these bases. The different bases must be separated by commas.
	* dialog:
		* --divisor: Skips inputting the divisor and forces this value.
		* --base: Skips inputting the base and forces this value.
		* --no-loop: Forces a single execution of this application.
		* --skip-explanation: Always skips the application of the rule.
		* -s, --simple-dialog: Stops other options from being inputted and only asks for the arguments for the rule.
		* If any other option is active, they will be used and the application will act as if -s was activated.

- Output values

0: successful execution.
1: there were invalid arguments.
2: there was an error parsing the options or arguments.
3: the user quit during dialog.
4: could not find a non-coefficient rule.
5: multiple rules were requested, some weren't calculated.
6: multiple rules were requested, none were calculated.</value>
  </data>
  <data name="AyudaCorta" xml:space="preserve">
	<value>- Usage: CalcDivCLI.exe [-&amp;lt;short option name&amp;gt;|--&amp;lt;long option name&amp;gt; [&amp;lt;mandatory arguments ...&amp;gt; [&amp;lt;optional arguments&amp;gt;...]]

Example: *CalcDiv.exe single 7 10 --dividend 75 --json*
Equivalent to: *CalcDiv.exe single -jd 75*
Calculates the divisibility rule of 7 in base 10, outputs it in JSON and applies it to 75.

Use --help for more information about options and arguments.</value>
  </data>
  <data name="ErrorBaseCoprima" xml:space="preserve">
	<value>The base must be an integer greater than one and coprime with the divisor.</value>
  </data>
  <data name="ErrorCoeficientes" xml:space="preserve">
	<value>The number of coefficients must be a positive integer.</value>
  </data>
  <data name="ErrorDivisor" xml:space="preserve">
	<value>The divisor must be a non-negative integer.
Keep in mind that numbers divisible by a negative number are divisible by its absolute value.</value>
  </data>
  <data name="ErrorDivisorCoprimo" xml:space="preserve">
	<value>The divisor must be a positive integer greater than one and coprime with the base.
Two numbers are coprime if their greatest common divisor is greater than one.</value>
  </data>
  <data name="ErrorDivisorExtra" xml:space="preserve">
	<value>The divisor must be a non-negative integer.</value>
  </data>
  <data name="ErrorNumerico" xml:space="preserve">
	<value>The divisor, the base and coefficient amount must be positive integers.</value>
  </data>
  <data name="ErrorPrimo" xml:space="preserve">
	<value>The divisor and the base are not coprime.
Calculating a coefficient in this case will not be implemented.
Run this program with the option-x to obtain a different type of rule, or activate it in dialog mode.</value>
	<comment>1 is the divisior divided by the gcd of itself and the base.
0 is the gcd.</comment>
  </data>
  <data name="ErrorPrimoExtra" xml:space="preserve">
	<value>The divisor and the base are not coprime.
Calculating a coefficient in this case will not be implemented.</value>
  </data>
  <data name="ErrorReglaNula" xml:space="preserve">
	<value>A rule was null when calculated, cannot continue execution.</value>
  </data>
  <data name="ObjetoNuloMensaje" xml:space="preserve">
	<value>Object is null.</value>
  </data>
  <data name="MensajeParametrosDirecto" xml:space="preserve">
	<value>Divisor: {0}, Base: {1}.</value>
	<comment>The parameters are the arguments passed to the -d flag</comment>
  </data>
  <data name="HelpVerbDialog" xml:space="preserve">
	<value>Starts a dialog to create divisibility rules.</value>
  </data>
  <data name="HelpVerbHelp" xml:space="preserve">
	<value>Outputs the help for this application.</value>
  </data>
  <data name="HelpVerbManual" xml:space="preserve">
	<value>Outputs a more detailed help document.</value>
  </data>
  <data name="HelpVerbSingle" xml:space="preserve">
	<value>Outputs a single rule given its divisor, base and length, if it is a coefficient rule.</value>
  </data>
  <data name="HelpAnularBucle" xml:space="preserve">
	<value>Cancels dialog mode's looping behavior. Will one calculate rules once.</value>
  </data>
  <data name="HelpAyuda" xml:space="preserve">
	<value>Outputs a longer help document explaining this application more in-depth.</value>
  </data>
  <data name="HelpAyudaCorta" xml:space="preserve">
	<value>Outputs short document with information on how to run this program.</value>
  </data>
  <data name="HelpBase" xml:space="preserve">
	<value>Sets a value for the base the rule will be applied in.
Defaults to ten, must be greater than one.</value>
  </data>
  <data name="HelpBaseDialogo" xml:space="preserve">
	<value>Sets a default base for dialog, skipping input.
Must be a valid integer greater than 1.</value>
  </data>
  <data name="HelpDirecto" xml:space="preserve">
	<value>The divisor, base, and optionally the number of coefficients as arguments, not as dialog input.</value>
  </data>
  <data name="HelpDividendo" xml:space="preserve">
	<value>Sets the dividends to apply the rule is successfully obtained.
Must be valid 64-bit integers separated by commas.
The absolute value will be used, this does not affect the result.</value>
  </data>
  <data name="HelpDivisor" xml:space="preserve">
	<value>Sets the divisor to find its divisibility rule.
Obligatory, must be a valid 64-bit non-negative integer.</value>
  </data>
  <data name="HelpDivisorDialogo" xml:space="preserve">
	<value>Sets a default divisor for dialog, skipping input.
Must be a valid 64-bit non-negative integer.
If the base is specified, will default to extra rules, unless the divisor and base are coprime.</value>
  </data>
  <data name="HelpDivisorVarias" xml:space="preserve">
	<value>Sets the divisor to find its divisibility rule.
Obligatory, must be a list of valid 64-bit non-negative integers.</value>
  </data>
  <data name="HelpExtendido" xml:space="preserve">
	<value>May return other types of rules, also outputs explanations on how to apply them.</value>
  </data>
  <data name="HelpJson" xml:space="preserve">
	<value>Outputs coefficient rule as a JSON object, changes made by other flags are not ignored.</value>
  </data>
  <data name="HelpLongitud" xml:space="preserve">
	<value>Sets a value for the length of the rule if it is a coefficient rule.
Defaults to one, must be a valid positive 32-bit integer.</value>
  </data>
  <data name="HelpLongitudDialogo" xml:space="preserve">
	<value>Sets a default rule length for dialog, skipping input.
Must be a valid 32-bit positive integer.
Defaults to coefficient rules, unless extra rules are activated.</value>
  </data>
  <data name="HelpNombre" xml:space="preserve">
	<value>Gives the coefficient rule a name, which is included in its output.</value>
  </data>
  <data name="HelpSaltar" xml:space="preserve">
	<value>Without any other options, skips dialogue related to other options, does not affect output.</value>
  </data>
  <data name="HelpTextMultiple" xml:space="preserve">
	<value>Outputs all the valid combinations of rules given a list of divisors, bases and lengths if they are coefficient rules.
The elements in the same lists are separated by commas.</value>
  </data>
  <data name="HelpTodos" xml:space="preserve">
	<value>Outputs all coefficient rules with elements whose absolute value is less than the divisor.</value>
  </data>
  <data name="HelpVarias" xml:space="preserve">
	<value>Recieves multiple bases, divisors and coefficients as arguments and outputs the rule formed by every (divisor,base,coefficient) tuple.
All bases, divisors and coefficients must be valid.
Activates direct output mode.</value>
  </data>
  <data name="HelpExplicacion" xml:space="preserve">
	<value>Skips rule explanation and application confirmation in dialog mode and skips to repetition confirmation if not disabled.</value>
  </data>
</root>